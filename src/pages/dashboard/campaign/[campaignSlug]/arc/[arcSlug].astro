---
import NavBar from '@components/app/components/nav-bar/nav-bar'
import SideBarWrapper from '@components/app/components/side-bar/side-bar'
import type { TArc } from '@components/app/hooks/useArcQueries'
import ArcScreen from '@components/app/screens/arc'
import { ModeToggle } from '@components/ui/mode-toggle'
import { db } from '@db/db'
import { arc as arcSchema, arcThing, campaign, thing } from '@db/schema'
import MainLayout from '@layouts/main-layout.astro'
import { slateToHtml } from '@utils/slate-text-extractor'
import { and, desc, eq } from 'drizzle-orm'
import { alias } from 'drizzle-orm/sqlite-core'
import type { Descendant } from 'slate'

const { campaignSlug, arcSlug } = Astro.params

if (!campaignSlug || !arcSlug) {
  return Astro.redirect('/404')
}

const campaignResult = await db
  .select()
  .from(campaign)
  .where(eq(campaign.slug, campaignSlug))
  .limit(1)

if (!campaignResult[0]) {
  return Astro.redirect('/404')
}

const parentArcSchema = alias(arcSchema, 'parentArcSchema')

const arcResult = await db
  .select({
    arc: {
      ...arcSchema,
      parentArc: parentArcSchema,
    },
  })
  .from(arcSchema)
  .leftJoin(parentArcSchema, eq(arcSchema.parentArcId, parentArcSchema.id))
  .where(
    and(
      eq(arcSchema.slug, arcSlug),
      eq(arcSchema.campaignId, campaignResult[0].id)
    )
  )
  .limit(1)

const arcData = arcResult[0]?.arc as TArc

if (!arcData.parentArcId) {
  arcData.parentArc = undefined
}

if (!arcData) {
  return Astro.redirect('/404')
}

const childArcs = await db
  .select()
  .from(arcSchema)
  .where(eq(arcSchema.parentArcId, arcData.id))

arcData.childArcs = childArcs
const arc = arcData

const things = await db
  .select({ thing })
  .from(thing)
  .fullJoin(arcThing, eq(thing.id, arcThing.thingId))
  .where(eq(arcThing.arcId, arcData.id))
  .orderBy(desc(thing.updatedAt))
  .limit(10)
---

<MainLayout title={arc.name}>
  <NavBar
    user={Astro.locals.user}
    campaignSlug={campaignSlug}
    client:load
    transition:persist
  />
  <div class='flex'>
    <SideBarWrapper
      user={Astro.locals.user}
      campaignSlug={campaignSlug}
      client:load
      transition:persist
    />
    <main class='flex-1 space-y-6 p-4 md:p-8 lg:p-12'>
      <div class='flex items-baseline gap-6'>
        <h1 class='text-primary text-4xl font-bold md:text-5xl'>
          {arc.name}
          <span class='text-lg font-normal'>(Arc)</span>
        </h1>
      </div>
      <div class='grid grid-cols-1 md:grid-cols-[1fr_300px]'>
        <ArcScreen
          arc={arc}
          user={Astro.locals.user!}
          campaignSlug={campaignSlug}
          client:load
        />
        <div
          class='border-border mt-8 overflow-y-auto border-l pl-6 md:mt-0 md:pl-12'
        >
          <h2 class='mb-4 text-2xl font-semibold'>Recently Updated Things</h2>
          <div class='space-y-4'>
            {
              things
                .map((thing) => thing.thing)
                .filter((thing) => thing !== null)
                .map((thing) => (
                  <div class='thing border-border bg-primary/5 relative rounded-lg border p-4'>
                    <h3 class='text-lg font-semibold'>{thing.name}</h3>
                    <div
                      class='text-muted-foreground line-clamp-3 text-sm'
                      set:html={slateToHtml(
                        thing.description as Descendant[],
                        campaignSlug
                      )}
                    />
                    <a
                      href={`/dashboard/campaign/${campaignSlug}/thing/${thing.slug}/`}
                      class='absolute inset-0'
                    >
                      <span class='sr-only'>View {thing.name}</span>
                    </a>
                  </div>
                ))
            }
          </div>
        </div>
      </div>
    </main>
  </div>
  <ModeToggle
    user={Astro.locals.user}
    campaignSlug={campaignSlug}
    client:visible
  />
</MainLayout>

<style is:global>
  .thing {
    h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
      font-weight: bold;
    }
  }
</style>
