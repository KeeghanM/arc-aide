---
import MainLayout from '@layouts/main-layout.astro'
import { db } from '@lib/db/db'
import { arc, campaign, thing, user } from '@lib/db/schema'
import { and, desc, eq } from 'drizzle-orm'

const { username, campaignSlug } = Astro.params

if (!username || !campaignSlug) {
  return Astro.redirect('/404')
}

// Fetch user by username
const [userData] = await db
  .select()
  .from(user)
  .where(eq(user.username, username))
  .limit(1)

if (!userData) {
  return Astro.redirect('/404')
}

// Fetch published campaign for this user
const [campaignData] = await db
  .select()
  .from(campaign)
  .where(
    and(
      eq(campaign.slug, campaignSlug),
      eq(campaign.userId, userData.id),
      eq(campaign.published, true)
    )
  )
  .limit(1)

if (!campaignData) {
  return Astro.redirect('/404')
}

const arcData = await db
  .select()
  .from(arc)
  .where(and(eq(arc.campaignId, campaignData.id), eq(arc.published, true)))
  .orderBy(desc(arc.updatedAt))

const thingData = await db
  .select()
  .from(thing)
  .where(and(eq(thing.campaignId, campaignData.id), eq(thing.published, true)))
  .orderBy(desc(thing.updatedAt))
  .limit(20)
---

<MainLayout title={`${campaignData.name} | ${username} | ArcAide`}>
  <div class='dnd-content min-h-screen'>
    <div class='mb-4'>
      <a
        href={`/${username}`}
        class='text-accent text-sm hover:underline'
      >
        ‚Üê Back to {username}'s campaigns
      </a>
    </div>

    <h1>{campaignData.name}</h1>
    <p class='text-muted-foreground mb-2'>
      By <a
        href={`/${username}`}
        class='text-accent hover:underline'
        >{username}</a
      >
    </p>

    {
      campaignData.description && (
        <div class='mb-8'>
          {typeof campaignData.description === 'string' ? (
            <p>{campaignData.description}</p>
          ) : (
            <div>Campaign description available</div>
          )}
        </div>
      )
    }

    <section class='mb-8'>
      <h2>Story Arcs</h2>
      {
        arcData.length > 0 ? (
          <div class='grid gap-4 md:grid-cols-2 lg:grid-cols-3'>
            {arcData.map((arc) => (
              <div class='card'>
                <h3 class='mb-2 font-semibold'>
                  <a
                    href={`/${username}/campaign/${campaignSlug}/arc/${arc.slug}`}
                    class='hover:text-accent hover:underline'
                  >
                    {arc.name}
                  </a>
                </h3>
                {arc.hook && (
                  <p class='text-muted-foreground text-sm'>
                    {typeof arc.hook === 'string'
                      ? arc.hook.slice(0, 100)
                      : 'Arc content available'}
                    ...
                  </p>
                )}
              </div>
            ))}
          </div>
        ) : (
          <p class='text-muted-foreground'>No published arcs available.</p>
        )
      }
    </section>

    <section>
      <h2>Campaign Elements</h2>
      {
        thingData.length > 0 ? (
          <div class='grid gap-4 md:grid-cols-2 lg:grid-cols-4'>
            {thingData.map((thing) => (
              <div class='card'>
                <h3 class='mb-1 font-semibold'>
                  <a
                    href={`/${username}/campaign/${campaignSlug}/thing/${thing.slug}`}
                    class='hover:text-accent hover:underline'
                  >
                    {thing.name}
                  </a>
                </h3>
              </div>
            ))}
          </div>
        ) : (
          <p class='text-muted-foreground'>No published elements available.</p>
        )
      }
    </section>
  </div>
</MainLayout>
